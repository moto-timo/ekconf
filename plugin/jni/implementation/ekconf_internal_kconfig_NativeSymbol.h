/*
* Ekconf, an Eclipe plug-in for configuring the Linux kernel or Buildroot.
* 
* Copyright (C) 2012 Tiana Rakotovao Andriamahefa <rkmahefa@gmail.com>
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 52 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ekconf_internal_kconfig_NativeSymbol */

#ifndef _Included_ekconf_internal_kconfig_NativeSymbol
#define _Included_ekconf_internal_kconfig_NativeSymbol
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeGetSymbolType
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeGetSymbolType
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeIsChoice
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeIsChoice
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeIsChoiceValue
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeIsChoiceValue
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeGetName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeGetName
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeGetTypeName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeGetTypeName
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeIsChangeable
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeIsChangeable
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeGetTristateValue
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeGetTristateValue
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeSetTristateValue
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeSetTristateValue
  (JNIEnv *, jobject, jint);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeToggleTristateValue
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeToggleTristateValue
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeHasValue
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeHasValue
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeGetStringValue
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeGetStringValue
  (JNIEnv *, jobject);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeSetStringValue
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeSetStringValue
  (JNIEnv *, jobject, jstring);

/*
 * Class:     ekconf_internal_kconfig_NativeSymbol
 * Method:    nativeTristateWithinRange
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_ekconf_internal_kconfig_NativeSymbol_nativeTristateWithinRange
  (JNIEnv *, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
